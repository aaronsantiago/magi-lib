use `magiRuntime.create` to create a new runtime.

pass callbacks to have immediate updates when state changes:
- `runtimeUpdated(runtime)` called when graphs are processed. called even if no changes are made

call `updateRuntime` to update the runtime with new data.
critically, this should happen with the `project` field with the project that is loaded from Rivet.

use `makeSerializeable` to generate an object for saving to JSON

trigger `processGraphs` to begin a graph process. runtimeUpdated will be called when the process is complete.


basic setup:
1. create magi runtime
2. load a rivet project
3. update the runtime with the project
4. process the graphs

FOR IMAGE INPUTS
the runtimeData entry should be formatted as follows:

```javascript
{
  runtimeData: {
    mediaType: "image/png", // haven't tested with jpegs etc.
    data: [image data as Uint8Array]
  }
}
```

Remember to change the type of the graph input to "image" as well.


NOTE:
when running in browser, build systems (AKA vite) may complain about top-level await.
this is however only used in the node context, so you may want to configure your build system to ignore this.

you'll also have to import fengari-web.js into the html file. see [magi-fe](https://github.com/aarondot/magi-fe) as an example.
```javascript

export default defineConfig({
  optimizeDeps: {
    esbuildOptions: {
      supported: {
            'top-level-await': true //browsers can handle top-level-await features
          },
    }
  },
  esbuild: {
      supported: {
        'top-level-await': true //browsers can handle top-level-await features
      },
  },
	plugins: [sveltekit()]
});
```
